package com.linktic.productos.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.linktic.productos.dto.ProductoRequest;
import com.linktic.productos.model.Producto;
import com.linktic.productos.repository.ProductoRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.math.BigDecimal;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureWebMvc
@Testcontainers
@Transactional
class ProductoIntegrationTest {

    @Container
    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>("postgres:13")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");

    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgres::getJdbcUrl);
        registry.add("spring.datasource.username", postgres::getUsername);
        registry.add("spring.datasource.password", postgres::getPassword);
    }

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private ProductoRepository productoRepository;

    @BeforeEach
    void setUp() {
        productoRepository.deleteAll();
    }

    @Test
    void crearProducto_DeberiaRetornarProductoCreado() throws Exception {
        ProductoRequest request = createProductoRequest("Producto Test", new BigDecimal("99.99"), "Descripci√≥n");

        mockMvc.perform(post("/api/v1/productos")
                .contentType(MediaType.APPLICATION_JSON)
                .header("X-API-Key", "productos-api-key-2024")
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.type").value("productos"))
                .andExpect(jsonPath("$.data.attributes.nombre").value("Producto Test"))
                .andExpect(jsonPath("$.data.attributes.precio").value(99.99));
    }

    private ProductoRequest createProductoRequest(String nombre, BigDecimal precio, String descripcion) {
        ProductoRequest request = new ProductoRequest();
        ProductoRequest.Data data = new ProductoRequest.Data();
        ProductoRequest.Data.Attributes attributes = new ProductoRequest.Data.Attributes();
        
        attributes.setNombre(nombre);
        attributes.setPrecio(precio);
        attributes.setDescripcion(descripcion);
        
        data.setAttributes(attributes);
        request.setData(data);
        
        return request;
    }
}